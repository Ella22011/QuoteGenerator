name: Label & comment issues

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened]

jobs:
  label_and_comment_on_issues:
    if: github.event_name == 'issues'  # ✅ Run this job only for issue events
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Attach labels to issues
        uses: actions/github-script@v7
        with:
          script: |
            if (['opened', 'reopened'].includes(context.payload.action)) {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['issue', 'fix']
              });
            }

      - name: Comment on issue opened or reopened
        if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "📝 Thank you for opening this issue. We’ll review it as soon as possible!"
            });

      - name: Comment when issue is closed
        if: ${{ github.event.action == 'closed' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "✅ This issue has been closed. Thank you for your contribution!"
            });

  welcome_new_pr:
    if: github.event_name == 'pull_request'  # ✅ Run only on PRs
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Comment for first-time PR opener
        uses: actions/github-script@v7
        with:
          script: |
            const creator = context.payload.sender.login;
            const opts = github.rest.pulls.list.endpoint.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all'
            });

            const allPRs = await github.paginate(opts);
            const previousPRsByUser = allPRs.filter(pr => pr.user.login === creator);

            if (previousPRsByUser.length === 0) {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🎉 Welcome, @${creator}! Thanks for opening your first pull request — we appreciate your contribution and will review it shortly.`
              });
            }
