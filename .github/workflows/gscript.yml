name: Label & comment issues

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened]

jobs:
  label_and_comment_on_issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Attach labels to issues
        uses: actions/github-script@v7
        with:
          script: |
            if (['opened', 'reopened'].includes(context.eventName === 'issues' ? context.payload.action : '')) {
              github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['issue', 'fix']
              });
            }

      - name: Comment on issue opened or reopened
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Thank you for opening this issue. We will review it as soon as possible."
            });

      - name: Comment when issue is closed
        if: github.event.action == 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "This issue has been closed."
            });

  welcome_new_pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Comment for first-time PR opener
        uses: actions/github-script@v7
        with:
          script: |
            const creator = context.payload.sender.login;
            const opts = github.rest.issues.listForRepo.endpoint.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              creator: creator,
              state: 'all'
            });
            const issues = await github.paginate(opts);
            const previousPRs = issues.filter(issue => issue.pull_request);

            if (previousPRs.length === 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Welcome, ${creator}. Thank you for opening your first pull request. We will review it soon.`
              });
            }

  authenticate_with_token:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GitHub Token
        run: |
          echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV
          
      - name: Use GitHub Token for API access
        uses: actions/github-script@v7
        with:
          script: |
            const octokit = github.getOctokit(process.env.GH_TOKEN);
            // You can now make authenticated requests using octokit
            console.log(await octokit.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            }));
